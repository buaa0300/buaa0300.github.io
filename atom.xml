<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南华coder的空间</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://buaa0300/nanhuacoder.com/"/>
  <updated>2018-01-03T15:27:53.471Z</updated>
  <id>http://buaa0300/nanhuacoder.com/</id>
  
  <author>
    <name>南华coder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对称加密之AES介绍</title>
    <link href="http://buaa0300/nanhuacoder.com/2018/01/03/AESIntro/"/>
    <id>http://buaa0300/nanhuacoder.com/2018/01/03/AESIntro/</id>
    <published>2018-01-03T15:23:50.000Z</published>
    <updated>2018-01-03T15:27:53.471Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4></blockquote><ul><li><p><strong>对称加密</strong>比<strong>非对称加密</strong>要快。频繁的数据加密，优先考虑使用<strong>对称加密</strong>。</p></li><li><p>DES -&gt; 3DES -&gt; <strong>AES</strong>（Advanced Encryption Standard，高级加密标准）；目前对称加密使用<strong>AES</strong>为佳，它已经取代DES和3DES对称算法了。</p></li><li><p>AES是项目中使用较多的对称加密算法，本文简单介绍下AES。</p></li></ul><blockquote><h4 id="二、AES算法的重要组成"><a href="#二、AES算法的重要组成" class="headerlink" title="二、AES算法的重要组成"></a>二、AES算法的重要组成</h4></blockquote><h5 id="1、密钥长度（Key-Size）"><a href="#1、密钥长度（Key-Size）" class="headerlink" title="1、密钥长度（Key Size）"></a>1、密钥长度（Key Size）</h5><p>  AES算法规定密钥长度有三种：128bits、192bits和256 bits。其中<strong>128 bits的key可以满足大部分业务需求</strong>。</p><h5 id="2、加密模式（Cipher-Mode）"><a href="#2、加密模式（Cipher-Mode）" class="headerlink" title="2、加密模式（Cipher Mode）"></a>2、加密模式（Cipher Mode）</h5><p>   AES属于块加密（Block Cipher），加密数据块（Block）必须为<strong>128bits（16字节）</strong>；加密模式主要有以下<strong>六种</strong>模式：</p><p><strong>1) ECB (Electronic Codebook Book，电子密码本模式)</strong></p><ul><li><p><strong>简介</strong>：将数据分成若干块，分别对每块进行加密，最后将这些密文块组成最后的加密结果</p></li><li><p><strong>说明</strong>：最简单的模式，安全性较低。因为ECB的明文分组与密文分组是一一对应的关系，如果明文中存在多个相同的明文分组，其对应的密文分组也是相同的；<strong>不推荐使用</strong>。</p></li></ul><p><strong>2) CBC（Cipher Block Chaining，密码分组链接模式)</strong></p><ul><li><p><strong>简介</strong>：将数据分块后，每一块数据与上一块密文XOR（异或）后，再进行加密；</p></li><li><p><strong>说明</strong>：比较推荐使用的模式（但Apple已经不推荐使用CBC模式，建议使用<strong>GCM</strong>模式）。</p></li></ul><p><strong>3) CTR(Counter，计数器模式)</strong></p><ul><li><p><strong>简介</strong>：通过将<strong>逐次累加的计数器</strong>进行加密来生成密钥流的流密码；最终的密文分组是通过将计数器加密得到的比特序列，与明文分组进行XOR得到的。</p></li><li><p><strong>说明</strong>：比较推荐使用的模式</p></li></ul><p><strong>4) CFB(Cipher FeedBack,密码反馈模式)</strong></p><ul><li><p><strong>简介</strong>：和CBC类似，加密模式和CBC类似，但其可以将块密码变为自同步的流密码。</p></li><li><p><strong>说明</strong>：不推荐使用的模式</p></li></ul><p><strong>5) OFB(Output FeedBack, 输出反馈模式)</strong></p><ul><li><p><strong>简介</strong>：将块密码变成同步的流密码，它产生密钥流的块，然后将其与明文块进行异或，得到密文。</p></li><li><p><strong>说明</strong>：不推荐使用的模式</p></li></ul><p><strong>6) GCM(Galois/Counter Mode,)</strong></p><ul><li><p><strong>简介</strong>：GCM中的G就是指GMAC(消息验证码)，C就是指CTR(计数器模式)</p></li><li><p><strong>说明</strong>：GCM可以提供对消息的加密和完整性校验，AES模式最好选择。</p></li></ul><p><strong>总结</strong>: 推荐先后顺序：<strong>GCM &gt; CTR &gt; CBC</strong>；详细内容可以参考<a href="https://xiaoxueying.gitbooks.io/graphic-cryptology/content/block_cipher_mode.html" target="_blank" rel="noopener">Block cipher mode</a>、<a href="http://blog.csdn.net/T0mato_/article/details/53160772" target="_blank" rel="noopener">AES-GCM加密算法</a></p><h5 id="3、填充方式（Padding）"><a href="#3、填充方式（Padding）" class="headerlink" title="3、填充方式（Padding）"></a>3、填充方式（Padding）</h5><p>  1）<strong>块加密</strong>要求对<strong>特定长度的数据块</strong>进行加密，因此<strong>CBC模式</strong>、<strong>ECB模式</strong>需要在最后一数据块加密前进行数据填充。（CFB，OFB和CTR模式由于与key进行加密操作的是上一块加密后的密文，因此不需要对最后一段明文进行填充）。</p><p>  2）iOS SDK中提供了<strong>PKCS7Padding</strong>，Java提供了<strong>PKCS5Padding</strong>。原则上PKCS5Padding限制了填充的Block Size为8 字节（大于8 字节，填充和PKCS7Padding相同），而PKCS7Padding的Block Size可以为1到255字节; 填充值的算法（需要填充x个字节，填充的值就是x）都是一样的：</p><pre><code>value = k - (l mod k)  ,K = 块大小，l = 数据长度；假设k是16，I是5,那么value是11，也就是说，需要填充11个byte的 0x0B(十进制是11)</code></pre><p>  3）因为<strong>AES加密数据块</strong>Block Size规定为16字节(<em>128bits</em>), 大于8 字节(64 bits), 所以<strong>PKCS5Padding和PKCS7Padding填充效果</strong>是一样的。</p><p>  <strong>说明</strong>：数据块的长度如果是16倍数，padding长度为16，padding值为0x10。即在输入后面补齐16字节的0x10；如果数据块的长度不是16倍数，padding长度为16-L%16，padding值为16-L%16。即在输入后面补齐16-L%16的字节，值为16-L%16。</p><p>  4）平时使用最多的是PKCS7Padding，NoPadding、ISO10126Padding和ZeroPadding忽略不提。</p><h5 id="4、初始向量（Initialization-Vector）"><a href="#4、初始向量（Initialization-Vector）" class="headerlink" title="4、初始向量（Initialization Vector）"></a>4、初始向量（Initialization Vector）</h5><p>  CBC、CFB和OFB这些加密模式需要传入一个初始向量，其大小与Block Size相等；当不传入初始向量时，系统将默认使用一个全0的初始向量。</p><blockquote><h4 id="三、AES算法Python实现"><a href="#三、AES算法Python实现" class="headerlink" title="三、AES算法Python实现"></a>三、AES算法Python实现</h4></blockquote><p><strong>说明</strong>：使用Python的加密包<a href="https://pypi.python.org/pypi/pycrypto" target="_blank" rel="noopener">pycrypto</a> (下载后，执行<em>python setup.py build + python setup.py install</em>)，实现AES的ECB、CBC、CTR、CFB和OFB模式下的加密和解密；定义一个PaddingHelper类，实现PKCS7Padding；</p><pre><code>#!/usr/bin/python # -*- coding:utf-8 -*-import sysimport osimport base64from Crypto.Cipher import AESfrom Crypto.Util import Counter# ***** Padding Helper For AES *****class  PaddingHelper(object):    &quot;&quot;&quot;docstring for  Padding Helper&quot;&quot;&quot;    def __init__(self, arg):        super(PaddingHelper, self).__init__()        self.arg = arg    # 保证keyStr的长度是16    @classmethod    def validKeyStr(self,keyStr):            keySize = 16        if len(keyStr) &lt; keySize:            zeroCount = keySize - len(keyStr) % keySize              for i in range(0, zeroCount):                  keyStr = keyStr + &apos;\0&apos;         else:            return keyStr[0:keySize]        return keyStr      # 实现PKCS7Padding/PKCS7Padding    @classmethod    def PKCS7Padding(self,text,blockSize=16):            count = len(text)            mod_num = count % blockSize        add_num = blockSize - mod_num        return text + chr(add_num) * add_num        @classmethod    def MovePKCS7Pading(self,text,blockSize=16):        lastChar = text[-1]            paddingLen = ord(lastChar)        # 截取最后一部分填充快        lastChunk = text[-paddingLen:]        if lastChunk == chr(paddingLen) * paddingLen:            # 移除填充部分           return text[:-paddingLen]        return text     # AES PSK7/PSK5填充class AESUtil():    def __init__(self, key, model):        self.key = PaddingHelper.validKeyStr(key)        self.mode = model        self.iv = key   #初始向量初始化k，可以是别的值，但必须16字节    #加密函数，如果text不是16的倍数,那就补足为16的倍数    def encrypt(self, text):        if self.mode == AES.MODE_CTR:             # Create new AES CTR object #            cryptor = AES.new(self.key, self.mode, counter=Counter.new(128))        else:            cryptor = AES.new(self.key, self.mode, self.iv)        text = PaddingHelper.PKCS7Padding(text,16)        ciphertext = base64.b64encode(cryptor.encrypt(text))        return ciphertext    #解密后，去掉补足的空格用strip() 去掉    def decrypt(self, text):           if self.mode == AES.MODE_CTR:             # Create new AES CTR object #            cryptor = AES.new(self.key, self.mode, counter=Counter.new(128))        else:                cryptor = AES.new(self.key, self.mode, self.iv)        plainText = cryptor.decrypt(base64.b64decode(text))        return PaddingHelper.MovePKCS7Pading(plainText)if __name__ == &apos;__main__&apos;:    encrykey = &quot;0123456789abcdef&quot;    # plainText = &apos;1234567891234567&apos;    plainText = &apos;hello world&apos;    dict = {&quot;CBC模式&quot;: AES.MODE_CBC,             &quot;CFB模式&quot;: AES.MODE_CFB,             &quot;CTR模式&quot;: AES.MODE_CTR,            &quot;ECB模式&quot;: AES.MODE_ECB,            &quot;OFB模式&quot;: AES.MODE_OFB};    for key, value in dict.iteritems():        aes = AESUtil(encrykey,value)        encryptText = aes.encrypt(plainText)        print &quot;**********%s 加解密*******&quot; %(key)        print &quot;密文:&quot;,encryptText        print &quot;明文:&quot;,aes.decrypt(encryptText)</code></pre><p><strong>执行脚本的输出结果如下</strong></p><pre><code>**********ECB模式 加解密*******密文: gWm+1O9JqIdFWcWyANqt5w==明文: hello world**********CFB模式 加解密*******密文: GsZEtzHsqRLRjxfUU6T0Zg==明文: hello world**********CBC模式 加解密*******密文: wem0Upqsl5MBD0Z39jWO/g==明文: hello world**********OFB模式 加解密*******密文: GhcS5HH8im5yy3xtfAywYA==明文: hello world**********CTR模式 加解密*******密文: adUgVHVGk4Y3/LZatTZf6Q==明文: hello world</code></pre><blockquote><h4 id="四、AES算法使用说明"><a href="#四、AES算法使用说明" class="headerlink" title="四、AES算法使用说明"></a>四、AES算法使用说明</h4></blockquote><ul><li><p>对AES加密的结果，要使用<strong>Base64编码</strong>。因为其加密结果得到的字符串可能有不可见字符，保存和传输都有问题；把数据做Base64编码，统统变成可见字符。（Base64编码 将二进制流中每6个bit一组表示数据, 不足的部分补零,每两个0 用 一个 = 表示，把含有不可见字符串的信息用可见字符串表示出来 ）；对应的AES解密时，先要进行Base64解码</p></li><li><p>AES有很明显的优势：<strong>安全</strong>、<strong>加解密快</strong>（AES比RSA的加解密快1000倍）；但是劣势也明显，需重点保护<strong>密钥</strong>的安全；在实践中推荐组合使用<strong>AES</strong>和<em>*RSA</em>技术。</p></li><li><p>实践中<strong>常见的方案</strong>是：1）用AES来加密数据；2）AES的密钥通过<strong>伪随机数生成器</strong>生成；3）AES的密钥通过<strong>RSA公钥加密</strong>；4）最终将AES密钥的密文 和 数据的密文交给后台，后台利用对应的策略解密。</p></li><li><p>AES算法流程可以参考<a href="http://www.cnblogs.com/luop/p/4334160.html" target="_blank" rel="noopener">密码算法详解——AES</a></p></li></ul><blockquote><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4></blockquote><p>我是<a href="https://buaa0300.github.io/" target="_blank" rel="noopener">南华coder</a>，一名北漂的iOS程序猿。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h4 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h4&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;对称加密&lt;/strong&gt;比&lt;str
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈数据加密</title>
    <link href="http://buaa0300/nanhuacoder.com/2018/01/01/dataEnctypt/"/>
    <id>http://buaa0300/nanhuacoder.com/2018/01/01/dataEnctypt/</id>
    <published>2018-01-01T15:17:34.000Z</published>
    <updated>2018-01-03T15:23:25.008Z</updated>
    
    <content type="html"><![CDATA[<p><strong>导语：</strong>本文介绍常用的数据加密方式（不仅仅局限在iOS中使用）。</p><blockquote><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4></blockquote><p>加密是用来避免攻击这盗取信息的一种手段，加密算法主要有三类：<strong>Hash算法</strong>、<strong>对称加密算法</strong> 和 <strong>非对称加密算法</strong>。</p><h5 id="1、Hash算法"><a href="#1、Hash算法" class="headerlink" title="1、Hash算法"></a>1、Hash算法</h5><ul><li><p><strong>Hash算法</strong> 把一个任意长度的字节串映射 为一定长度的十六进制的数字串；这个数字串称为<strong>哈希值</strong>。</p></li><li><p>Hash算法一种<strong>单向算法</strong>，不能通过这个Hash值重新获得目标信息；一般用来<strong>存储不可还原的密码</strong> 或 <strong>检验数据的完整性</strong>，常见的Hash算法有MD2、MD4、MD5、HAVAL、SHA</p></li><li><p><strong>重点说明</strong>：MD2、MD4、MD5还有SHA-1都已经被碰撞攻击突破，Apple已经移除对MD5和SHA-1签名证书的信任，对于安全性较高的数据，建议使用<strong>SHA-2 Family</strong> 或其他能避免碰撞攻击的算法。</p></li></ul><h5 id="2、对称加密算法"><a href="#2、对称加密算法" class="headerlink" title="2、对称加密算法"></a>2、对称加密算法</h5><ul><li><p><strong>对称加密算法</strong>是指：加密和解密使用<strong>相同密钥</strong>的加密算法。对称加密算法的加解密的速度快，通常在大量数据加密时使用。</p></li><li><p>常见的对称加密算法有DES算法，3DES算法，TDEA算法，Blowfish算法，RC5算法，IDEA算法和AES算法。</p></li><li><p><strong>重点说明</strong>：DES 、3DES 已经被AES（Advanced Encryption Standard，高级加密标准）替代了；<strong>AES-ECB</strong>(电子密码本模式)最简单，安全性差，不建议使用，可以使用<strong>AES-CBC</strong>、<strong>AES-CTR</strong>、<strong>AES-GCM</strong>（Apple推荐的）；对称密钥的安全是必须要考虑并且解决的事情。</p></li></ul><h5 id="3、非对称加密"><a href="#3、非对称加密" class="headerlink" title="3、非对称加密"></a>3、非对称加密</h5><ul><li><p><strong>非对称加密算法</strong>是指：加密和解密使用<strong>不同密钥</strong>的加密算法，也称为公私钥加密，适合对少量数据的加密。</p></li><li><p>非对称加密算法的公钥是公开的，秘钥是自己保存的，比对称加密有更好的安全性，但是加解密速度要远远慢于对称加密；常见的非对称加密算法有：RSA、Elgamal、背包算法、Rabin、D-H、ECC（椭圆曲线加密算法）等。</p></li><li><p><strong>重点说明</strong>：<strong>RSA</strong>是使用最广的非对称加密算法，但是小于1024位的RSA私钥很容易被分解攻击，出于安全的考虑，建议在项目中使用大于等于2048位的RSA私钥。</p></li></ul><blockquote><h4 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h4></blockquote><ul><li><p>对<strong>大量数据(较大量的上报信息)</strong>加密，建议使用AES；对于<strong>少量数据（手机号、邮箱等）</strong>加密，建议使用RSA；对于比较重要的<strong>资源下载（如运营活动图片、配置数据等）</strong>，对下载下来的数据，要校验hash值，防止数据被篡改，保证数据的完整性。</p></li><li><p>对于核心的业务功能的数据，仅仅靠一种加密算法是不够的，综合利用<strong>两三种加解密算法</strong>，实现业务目标的同时，<strong>提高被破解的难度</strong>。</p></li></ul><blockquote><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4></blockquote><p>我是<a href="https://buaa0300.github.io/" target="_blank" rel="noopener">南华coder</a>，一名北漂的iOS程序猿。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;导语：&lt;/strong&gt;本文介绍常用的数据加密方式（不仅仅局限在iOS中使用）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>再见2017</title>
    <link href="http://buaa0300/nanhuacoder.com/2017/12/31/newStart/"/>
    <id>http://buaa0300/nanhuacoder.com/2017/12/31/newStart/</id>
    <published>2017-12-31T10:09:31.000Z</published>
    <updated>2018-01-01T15:18:36.152Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="再见2017"><a href="#再见2017" class="headerlink" title="再见2017"></a>再见2017</h4></blockquote><ul><li><p><strong>2017年</strong> 就这么匆匆而去，毕业工作快满2年了；从17年4月开始，断断续续在简书上写了些技术文章；而今回头看看，文章存在许多不足；最后两个月因为项目太忙(也有懒的原因)，几乎断更了。</p></li><li><p><strong>两年</strong>的时间，对于一个iOS Developer来说，不算短的时间，眼看要<strong>奔三</strong>了，带着2017的遗憾，怀着对2018年的美好憧憬，忐忑前行。</p></li><li><p>之前的文章大概写了6w字，依然保存在<a href="https://www.jianshu.com/u/7d197f08438f" target="_blank" rel="noopener">南华coder的简书</a>，新的文章将在这里继续。</p></li></ul><blockquote><h4 id="新的选择（Hex-Github）"><a href="#新的选择（Hex-Github）" class="headerlink" title="新的选择（Hex + Github）"></a>新的选择（Hex + Github）</h4></blockquote><p><strong>Hex</strong>是个不错的博客框架，结合Github，可以实现低成本(<em>学习成本和经济成本</em>) 、快速实现搭建个人博客的梦想。主要分以下几个步骤</p><h5 id="1、安装和建站"><a href="#1、安装和建站" class="headerlink" title="1、安装和建站"></a>1、安装和建站</h5><pre><code>//npm 安装 Hexo。npm install hexo-cli -g//初始化hexo文件夹hexo init &lt;folder&gt;//进入文件夹cd &lt;folder&gt;//新建所需要的文件npm install</code></pre><p>  <strong>新建完成后，指定文件夹的目录如下</strong>：</p><pre><code>.├── _config.yml (网站的配置信息，在此配置大部分的参数)├── package.json (应用程序的信息)├── scaffolds (模版文件夹, 新建文章时，Hexo根据 scaffold 来建立文件)├── source (资源文件夹)|   ├── _drafts|   └── _posts└── themes (主题文件夹, Hexo 会根据主题来生成静态页面)</code></pre><h5 id="2、配置-config-yml"><a href="#2、配置-config-yml" class="headerlink" title="2、配置_config.yml"></a>2、配置_config.yml</h5><pre><code># Sitetitle: 南华coder的空间subtitle:description: 曾经仗剑走天涯,如今沉醉代码忙author: 南华coderlanguage: zh-Hanstimezone:avatar: /uploads/avatar.jpeg</code></pre><p><strong>注意</strong>：冒号(:)后要有空格</p><h5 id="3、新建文件和本地发布"><a href="#3、新建文件和本地发布" class="headerlink" title="3、新建文件和本地发布"></a>3、新建文件和本地发布</h5><pre><code>// layout是文章的布局，默认是post，可以通过修改 _config.yml 中的   // default_layout 参数来指定默认布局; 默认以标题做为文件名称hexo new [layout] &lt;title&gt;//生成静态页面hexo generate //本地发布hexo server</code></pre><p><strong>注意</strong>：可以使用 hexo s -g 实现生成页面和本地部署，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 可以看到效果。</p><h5 id="4、部署到Github上"><a href="#4、部署到Github上" class="headerlink" title="4、部署到Github上"></a>4、部署到Github上</h5><pre><code># 修改_config.yml文件,添加Github仓库的地址deploy:  type: git  repo: https://github.com/buaa0300/buaa0300.github.io.git  branch: master // 生成页面 hexo g 或 hexo generate // 部署 hexo d 或 hexo deploy</code></pre><p><strong>说明</strong>：可以使用 hexo d -g 实现生成页面和部署</p><h5 id="5、主题"><a href="#5、主题" class="headerlink" title="5、主题"></a>5、主题</h5><p>Hexo还提供了许多主题，让你的页面看起来更漂亮，我选择比较大众化的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a></p><pre><code>//下载cd themesgit clone https://github.com/iissnan/hexo-theme-next//修改根路径下的_config.yml (网站的配置信息）theme: hexo-theme-next//修改主题样式(themes/hexo-theme-next/_config.yml)# Muse是默认样式#scheme: Muse  #scheme: Mist#scheme: Piscesscheme: Gemini</code></pre><h5 id="6、其他"><a href="#6、其他" class="headerlink" title="6、其他"></a>6、其他</h5><p>其他详细内容可以参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a>、<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">手把手教你用Hexo+Github 搭建属于自己的博客</a></p><blockquote><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4></blockquote><p>我是<a href="https://buaa0300.github.io/" target="_blank" rel="noopener">南华coder</a>，一名北漂的iOS程序猿。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h4 id=&quot;再见2017&quot;&gt;&lt;a href=&quot;#再见2017&quot; class=&quot;headerlink&quot; title=&quot;再见2017&quot;&gt;&lt;/a&gt;再见2017&lt;/h4&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2017年&lt;/str
      
    
    </summary>
    
    
  </entry>
  
</feed>
